<?xml version="1.0" encoding="UTF-8"?>

<project name="JPaint" default="default" basedir=".">
    <description>Builds, tests, and runs the project JPaint.</description>
    <import file="nbproject/build-impl.xml"/>
    
    <property name="src.dir" value="src/hu/elte/pt/jpaint"/>
    
    <property name="build.dir" value="jpaint-build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="jar.dir" value="jpaint-disrtibute"/>
    
    <property name="main-class" value="hu.elte.pt.jpaint.JPaint"/>
    
    <target name="clean">
        <echo message="DELETING: 'build', 'classes', and 'distribute' directories..."/>
        <echo message="'build'..."/>
        <delete dir="${build.dir}"/>
        <echo message="Success!" level="info"/>
        <echo message="'classes'..."/>
        <delete dir="${classes.dir}"/>
        <echo message="Success!" level="info"/>
        <echo message="'distributable'..."/>
        <delete dir="${jar.dir}"/>
        <echo message="Success!" level="info"/>
        <echo message="CLEAN SUCCESSFUL" level="info"/>
        <echo message="----------" level="info"/>
    </target>
    
    <target name="compile">
        <echo message="Creating classes directory..."/>
        <mkdir dir="${classes.dir}"/>
        <echo message="Success!" level="info"/>
        <echo message="Compiling JAVA sourcefiles..."/>
        <javac includeantruntime="false" srcdir="${src.dir}" destdir="${classes.dir}"/>
        <echo message="Success!" level="info"/>
        <echo message="COMPILE SUCCESSFUL" level="info"/>
        <echo message="----------" level="info"/>
    </target>
    
    <target name="jar" depends="compile">
        <echo message="Creating distributable directory..."/>
        <mkdir dir="${jar.dir}"/>
        <echo message="Success!" level="info"/>
        <echo message="Creating .jar distributable application..."/>
        <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
        </jar>
        <echo message="Success!" level="info"/>
        <echo message="Deleting 'classes' directory..."/>
        <delete dir="${classes.dir}"/>
        <echo message="Success!" level="info"/>
        <echo message="JAR SUCCESSFUL" level="info"/>
        <echo message="----------" level="info"/>
    </target>
    
    <target name="run">
        <echo message="i call run!"/>
        <java jar="${jar.dir}/${ant.project.name}.jar" fork="true"/>
    </target> 
    
    <target name="clean-build" depends="clean,jar"/>
    <target name="main" depends="clean,run"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution

      -init-macrodef-java:      defines macro for class execution
      -do-jar:                  JAR building

      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="JPaint-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    -->
</project>
